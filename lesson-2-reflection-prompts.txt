What happens when you initialize a repository? Why do you need to do it?
A git repository is initialized so that git can track it.

How is the staging area different from the working directory and the repository?
What value do you think it offers?
The staging area is a preparatory area for completed work, but a step before an actual commit.
It allows a batch of changes to be uploaded, just as git expects.

How can you use the staging area to make sure you have one commit per logical
change?
Save your changes, but to commit it does not pick from working directory so upload change into staging area and then commit.
This helps with the one logical change per commit.

What are some situations when branches would be helpful in keeping your history
organized? How would branches help?
Branches can help when:
 - A entirely expectation is being built using the same code
 - A different funtionality is being built but does not want to alter the master branch

How do the diagrams help you visualize the branch structure?
The diagrams help by show from which commit the branches diverge, and which commits have parents and which don't.

What is the result of merging two branches together? Why do we represent it in
the diagram the way we do?
One branch becomes the new branch, the other can be deleted.
Both branches merged and the new branch retains rechability to commits of both the old branches.

What are the pros and cons of Git's automatic merging vs. always doing merges
manually?
